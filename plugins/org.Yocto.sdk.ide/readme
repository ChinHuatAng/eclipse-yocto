I. Setup Eclipse IDE
===============================
1. Download Eclipse Helios (3.6) for your host from http://www.eclipse.org/downloads/.  We suggest Eclipse Classic which contains: The Eclipse Platform, Java Development Tools (JDT), and Plug-in Development Environment.

2. Extract the archive on your machine (e.g. /home/user):
$ cd /home/user
$ tar xvzf eclipse-SDK-3.6-linux-gtk.tar.gz

3. Start Eclipse
$ /home/user/eclipse/eclipse&

4. Eclipse Plug-ins installation/updating
The Yocto Linux SDK Eclipse plug-in depends on some Eclipse projects plug-ins which include Eclipse C/C++ Development Tools (CDT), Autotools support for CDT (Incubation) and Target Management (RSE).

After installing Eclipse and first time bring up the IDE, go to Help->Install New Software and click on "Available Software Sites".  Ensure you have the following name checked:
CDT - http://download.eclipse.org/tools/cdt/releases/helios
Helios - http://download.eclipse.org/releases/helios
Target Management 3.2 Updates - http://download.eclipse.org/dsdp/tm/updates/3.2
The Eclipse Project Updates - http://download.eclipse.org/eclipse/updates/3.6

For CDT and Autotools support:
From "Work with:" drop down list, select "--All Available Sites--", expand the "Programming Languages" list and select "Autotools support for CDT (Incubation)" and "C/C++ Development Tools", then click on "Next>" button and following through for updates.  Then expand "CDT Optional Features" and select "C/C++ Remote Launch", then click on "Next>" and follow through for updates.

For RSE:
From "Work with:" drop down list, select "--All Available Sites--", and select "TM and RSE Main Features", then click on "Next>" button and following through for updates.

5. Yocto Linux SDK plug-in 
a. If you want to use Yocto plug-in source code
The source code is available from the Yocto Linux git repository:

git clone gitserver@git.pokylinux.org:eclipse-poky

To install the Yocto Linux SDK plug-in into your Eclipse IDE, under File->Import->General Existing Projects into Workspace ->Under "Select root directory" browse to org.Yocto.sdk.ide directory on your host.-> Finish.  After this, you should see org.Yocto.sdk.ide under your "Package Explorer".  Make sure there's no compilation error. 

b. If you want to just install Yocoto plug-in binary
Obtain the Yocto SDK tar file.  Under your Eclipse installation director's plugins directory (e.g. /home/user/eclipse/plugins), extract the tar file and you should see the following jar files:
org.eclipse.tm.tcf_*.jar
org.eclipse.tm.tcf.core_*.jar
org.eclipse.tm.tcf.rse_*.jar
org.eclise.tm.tcf.terminal_*.jar
org.Yocto.sdk.ide_*.jar

II. Access Yocto Linux Eclipse plug-in within Eclipse IDE
=========================================================
Option 1. If you install Yocto plug-in source code in your Eclipse IDE, to access Yocto plug-in you need to start  a new instance of Eclipse IDE with the plug-in, right click on "org.Yocto.sdk.ide"->Run As-> Eclipse Application, this will bring up the Eclipse IDE with the plug-in.

Note: Due to JVM GC won't clean up the permenant generation space (PermGen space) which is used to store meta-data descriptions of classes and the default value is set too small that may trigger "Jave.lang.OutOfMemoryError: PermGen space" and cause the applications hang.  To fix the issue, please add "-XX:MaxPermSize=256M" to the "VM arguments" for the VM where the plug-in are running.

Option 2: If you installed the Yocto plug-in binaries under your Eclipse installation directory, the next time you start Eclipse, Yocto plug-in will be available in the IDE. (Note: To fix the above GC issue, start your Eclipse with -vmargs follow by the above memory settings)

c. To configure the plug-in, Select Windows->Preferences->Yocto SDK. And enter the corresponding settings for your toolchain locations, Qemu kernel and images, etc.

d. To create a Yocto autotools project, under File->New->C Project->Yocto SDK Project.  Select a template to start with, e.g. Hello World Project.  By following the steps, this will create a new Yocto autotools based project for the selected project template.

e. If there's any specific setup for the newly created project, select your project, then under Project->Invoke Yocto Tools->Reconfigure Yocto.  In this dialogue, user can specify specific toolchain, Qemu setups for the project.

f. After project configuration is done. User Project->Reconfigure Project to trigger autogen.sh for the project and Project->Build to build the project.

g. After the project's compiled, it's now ready to do debug and remote deploy of the project.  This is achieved under Run manual.  If the target is Qemu, you'll find under Run->External Tools, there's one Qemu launcher for your project, just click on it to start Qemu. Please note, on the host only one Qemu instance can be started at one time.

h. If you have OProfile-viewer installed on your host. There'll be one entry under Run->External Tools->OProfileUI, which is the launcher for starting Oprofiel-viewer from the IDE.

i. Now you can follow the TCF readme file to setup remote TCF agent for remote debugging, deploy, profiling, etc.

