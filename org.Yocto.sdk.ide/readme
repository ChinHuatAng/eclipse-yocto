I. Setup Eclipse IDE
===============================
1. Download Eclipse Helios (3.6) for your host from http://www.eclipse.org/downloads/.  We suggest Eclipse Classic which contains: The Eclipse Platform, Java Development Tools (JDT), and Plug-in Development Environment.

2. Extract the archive on your machine (e.g. /home/user):
$ cd /home/user
$ tar xvzf eclipse-SDK-3.6-linux-gtk.tar.gz

3. Start Eclipse
$ /home/user/eclipse/eclipse&

4. Plug-ins installation
The Yocto Linux SDK Eclipse plug-in depends on some existing plug-ins which include Eclipse C/C++ Development Tooling-including Incubating components for autotools Plug-in (CDT) and Target Management (RSE).

For CDT:
Download "Eclipse IDE for C/C++ Linux Developers (includes Incubating components) from http://www.eclipse.org/downloads/.  Download the zip file and enter the path to it as an archive in the Install New Software dialog in Eclipse.  Please note that unzipping the master zip file into the eclipse directory will not install CDT properly.  

Or, enter this URL into the Available Software Sites section of the Install New Software dialog in Eclipse. The CDT features. http://download.eclipse.org/tools/cdt/releases/helios

For RSE:
Enter this URL into the Available Sortware Sites section of the Install New Software dialog in Eclipse.  The RSE features. http://download.eclipse.org/dsdp/tm/updates/3.2. And select "TM and RSE Main Features" only.

Yocto Linux SDK plug-in source code

The source code is available from the Yocto Linux git repository:

git clone gitserver@git.pokylinux.org:eclipse-poky

To install the Yocto Linux SDK plug-in into your Eclipse IDE, under File->Import->General Existing Projects into Workspace ->Under "Select root directory" browse to org.Yocto.sdk.ide directory on your host.-> Finish.  After this, you should see org.Yocto.sdk.ide under your "Package Explorer".  Make sure there's no compilation error. 

2. Run Yocto Linux Eclipse plug-in
==================================
a. Due to JVM GC won't clean up the permenant generation space (PermGen space) which is used to store meta-data descriptions of classes and the default value is set too small that may trigger "Jave.lang.OutOfMemoryError: PermGen space" and cause the applications hang.  To fix the issue, please add "-XX:MaxPermSize=256M" to the "VM arguments" for the VM where the plug-in are running.

b. To start the the plug-in, right click on "org.Yocto.sdk.ide"->Run As-> Eclipse Application, this will bring up the Eclipse IDE with the plug-in.

c. To configure the plug-in, Select Windows->Preferences->Yocto SDK. And enter the corresponding settings for your toolchain locations, Qemu kernel and images, etc.

d. To create a Yocto autotools project, under File->New->C Project->Yocto SDK Project.  Select a template to start with, e.g. Hello World Project.  By following the steps, this will create a new Yocto autotools based project for the selected project template.

e. If there's any specific setup for the newly created project, select your project, then under Project->Invoke Yocto Tools->Reconfigure Yocto.  In this dialogue, user can specify specific toolchain, Qemu setups for the project.

f. After project configuration is done. User Project->Reconfigure Project to trigger autogen.sh for the project and Project->Build to build the project.

g. After the project's compiled, it's now ready to do debug and remote deploy of the project.  This is achieved under Run manual.  If the target is Qemu, you'll find under Run->External Tools, there's one Qemu launcher for your project, just click on it to start Qemu. Please note, on the host only one Qemu instance can be started at one time.

h. If you have OProfile-viewer installed on your host. There'll be one entry under Run->External Tools->OProfileUI, which is the launcher for starting Oprofiel-viewer from the IDE.

i. Now you can follow the TCF readme file to setup remote TCF agent for remote debugging, deploy, profiling, etc.

